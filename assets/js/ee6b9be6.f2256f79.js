"use strict";(self.webpackChunkreact_native_echarts=self.webpackChunkreact_native_echarts||[]).push([[3841],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>g});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},s=Object.keys(e);for(a=0;a<s.length;a++)r=s[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)r=s[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),u=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,s=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=u(r),m=n,g=p["".concat(l,".").concat(m)]||p[m]||d[m]||s;return r?a.createElement(g,i(i({ref:t},c),{},{components:r})):a.createElement(g,i({ref:t},c))}));function g(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=r.length,i=new Array(s);i[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[p]="string"==typeof e?e:n,i[1]=o;for(var u=2;u<s;u++)i[u]=r[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},8991:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>u});var a=r(7462),n=(r(7294),r(3905));const s={sidebar_position:2},i="Use React Native Gesture Handler",o={unversionedId:"advanced-guides/use-rngh",id:"advanced-guides/use-rngh",title:"Use React Native Gesture Handler",description:"React Native Gesture Handler provides native-driven gesture management APIs for building best possible touch-based experiences in React Native. Starting from version 1.1.0, You can use it to handle gestures instead of PanResponder.",source:"@site/docs/advanced-guides/use-rngh.md",sourceDirName:"advanced-guides",slug:"/advanced-guides/use-rngh",permalink:"/react-native-echarts/docs/advanced-guides/use-rngh",draft:!1,editUrl:"https://github.com/wuba/react-native-echarts/tree/docs/docs/advanced-guides/use-rngh.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Import individually",permalink:"/react-native-echarts/docs/advanced-guides/import-individually"},next:{title:"Use in React",permalink:"/react-native-echarts/docs/advanced-guides/use-in-react"}},l={},u=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Custom gestures",id:"custom-gestures",level:2},{value:"Examples",id:"examples",level:2}],c={toc:u},p="wrapper";function d(e){let{components:t,...r}=e;return(0,n.kt)(p,(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"use-react-native-gesture-handler"},"Use React Native Gesture Handler"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/software-mansion/react-native-gesture-handler/"},"React Native Gesture Handler")," provides native-driven gesture management APIs for building best possible touch-based experiences in React Native. Starting from version 1.1.0, You can use it to handle gestures instead of PanResponder."),(0,n.kt)("h2",{id:"installation"},"Installation"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add react-native-gesture-handler\n")),(0,n.kt)("p",null,"After installation, wrap your entry point with ",(0,n.kt)("inlineCode",{parentName:"p"},"<GestureHandlerRootView>")," or ",(0,n.kt)("inlineCode",{parentName:"p"},"gestureHandlerRootHOC"),"."),(0,n.kt)("p",null,"For example:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx"},"import { GestureHandlerRootView } from 'react-native-gesture-handler';\nexport default function App() {\n  return <GestureHandlerRootView style={{ flex: 1 }}>{/* content */}</GestureHandlerRootView>;\n}\n")),(0,n.kt)("p",null,"for more information, please refer to ",(0,n.kt)("a",{parentName:"p",href:"https://docs.swmansion.com/react-native-gesture-handler/docs/installation"},"React Native Gesture Handler Installation"),"."),(0,n.kt)("h2",{id:"usage"},"Usage"),(0,n.kt)("p",null,"add ",(0,n.kt)("inlineCode",{parentName:"p"},"useRNGH")," prop to SkiaChart/SvgChart component."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx"},"import { SkiaChart } from '@wuba/react-native-echarts';\n\nexport default function App() {\n  return <SkiaChart useRNGH />;\n}\n")),(0,n.kt)("p",null,"Please note that when react-native-gesture-handler is not installed or useRNGH is set to false, the component will gracefully fall back to using the built-in PanResponder."),(0,n.kt)("h2",{id:"custom-gestures"},"Custom gestures"),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Custom gestures are only available when ",(0,n.kt)("inlineCode",{parentName:"p"},"useRNGH")," is set to true.")),(0,n.kt)("p",null,"Starting from version v1.2.0, you can specify custom gestures via the ",(0,n.kt)("inlineCode",{parentName:"p"},"gesture")," prop."),(0,n.kt)("p",null,"It can take:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"A ",(0,n.kt)("a",{parentName:"li",href:"https://docs.swmansion.com/react-native-gesture-handler/docs/api/gestures/gesture"},"gesture")),(0,n.kt)("li",{parentName:"ul"},"A gesture array"),(0,n.kt)("li",{parentName:"ul"},"A ",(0,n.kt)("a",{parentName:"li",href:"https://docs.swmansion.com/react-native-gesture-handler/docs/api/gestures/composed-gestures/"},"composed gesture")),(0,n.kt)("li",{parentName:"ul"},"A callback function returning a gesture, a gesture array or a composed gesture. It will provides you two args:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"defaultGestures"),", which are the default gestures set by React Native ECharts."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"dispatchEvents"),", which is a function to send events to ZRender. (You should only need it for complex cases)")))),(0,n.kt)("p",null,"If the ",(0,n.kt)("inlineCode",{parentName:"p"},"gesture")," prop is a gesture array or returns a gesture array, they will be composed to a ",(0,n.kt)("a",{parentName:"p",href:"https://docs.swmansion.com/react-native-gesture-handler/docs/gesture-composition/#race"},"Race gesture"),"."),(0,n.kt)("h2",{id:"examples"},"Examples"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"../expo-snacks/large-area-chart-use-rngh"},"Large area chart using react-native-gesture-handler"),"."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"../expo-snacks/custom-gesture-use-rngh"},"Custom gestures using react-native-gesture-handler"),".")))}d.isMDXComponent=!0}}]);